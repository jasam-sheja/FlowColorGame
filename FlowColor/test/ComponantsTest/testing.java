package ComponantsTest;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DigitalNet
 */

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.ImageIcon;
import javax.swing.*;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author DigitalNet
 */
public class testing extends javax.swing.JFrame {

    

    /**
     * Creates new form testJtable
     */
    public testing() {
        initMyComponents();
        initComponents();       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        setTitle("Calculator");
        setSize(300, 320);
        setLocationRelativeTo(null);
        
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jMenu1.setText("File");

        jMenuItem1.setText("jMenuItem1");
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);
        
        JPanel centerPanel = new JPanel();
        centerPanel.setBackground(Color.DARK_GRAY);
        add(centerPanel, BorderLayout.CENTER);
        GridLayout gridLayout = new GridLayout(4, 4, 1, 1);
        centerPanel.setLayout(gridLayout);
        for (myButton[] buttons : mybuttons) {
            for (myButton button : buttons) {
                centerPanel.add(button);
            }
        }

    }// </editor-fold>                        
    private void initMyComponents() {
        Dot[] dots = new Dot[2];
        dots[0] = new Dot(Color.BLUE, 0, 0, Color.BLUE, 3, 3);
        dots[1] = dots[0].next;
        Level level = new Level(dots, null, null, 4,1);
        gc = new GameControllar(level);

        for (int i = 0; i < gc.CellsPerRow(); i++) {
            final int fi = i;
            for (int j = 0; j < gc.CellsPerRow(); j++) {
                final int fj = j;
//                Cell cell = cells[i][j];
                gc.addPropertyChangeListner(new PropertyChangeListener() {
                    @Override
                    public void propertyChange(PropertyChangeEvent evt) {
                        Cell.State state = (Cell.State) evt.getNewValue();
                        Cell thecell = (Cell)evt.getOldValue();
                        switch (evt.getPropertyName()) {
                            case "UP":
//                                if (state == Cell.State.CROSS_ENTERD
//                                        || state == Cell.State.ENTERD){
//                                    if(!thecell.isCross()){
//                                        if(!thecell.hasDot())
//                                            buttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.VUBlue.Image()));
//                                        else
//                                            //buttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.VUBlue.Image()));
//                                    }
//                                }
                                    
                                if (state == Cell.State.CROSS_ENTERD
                                        || state == Cell.State.ENTERD
                                        || state == Cell.State.CROSS_LEAVED
                                        || state == Cell.State.LEAVED) {
                                    
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.VUBlue.Image()));
                                } else {
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.NULL.Image()));
                                }
                                break;
                            case "DOWN":
                                if (state == Cell.State.CROSS_ENTERD
                                        || state == Cell.State.ENTERD
                                        || state == Cell.State.CROSS_LEAVED
                                        || state == Cell.State.LEAVED) {
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.VDBlue.Image()));
                                } else {
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.NULL.Image()));
                                }
                                break;
                            case "RIGHT":
                                if (state == Cell.State.CROSS_ENTERD
                                        || state == Cell.State.ENTERD
                                        || state == Cell.State.CROSS_LEAVED
                                        || state == Cell.State.LEAVED) {
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.HRBlue.Image()));
                                } else {
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.NULL.Image()));
                                }
                                break;
                            case "LEFT":
                                if (state == Cell.State.CROSS_ENTERD
                                        || state == Cell.State.ENTERD
                                        || state == Cell.State.CROSS_LEAVED
                                        || state == Cell.State.LEAVED) {
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.HLBlue.Image()));
                                } else {
                                    mybuttons[fi][fj].setIcon(new ImageIcon(myImage.PipeImage.NULL.Image()));
                                }
                                break;
                        }
                    }
                }, i, j);
            }
        }
        
        mybuttons = new myButton[4][4];
        for (int i = 0; i < 4; i++) {
            final int fi = i;
            for (int j = 0; j < 4; j++) {
                final int fj = j;
                mybuttons[i][j] = new myButton(i, j);
                mybuttons[i][j].setIcon(new ImageIcon(myImage.PipeImage.NULL.Image()));
                mybuttons[i][j].addMouseListener(new myButtonListener(i, j){
            @Override
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                if (ismousePressed) {
                    gc.add(mybuttons[fi][fj].i, mybuttons[fi][fj].j, i0, j0);
                }
            }
            @Override
            public void mouseExited(java.awt.event.MouseEvent evt) {
                if (ismousePressed) {
                    i0 = mybuttons[fi][fj].i;
                    j0 = mybuttons[fi][fj].j;
                }
            }
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (evt.getButton() == MouseEvent.BUTTON1) {
                    ismousePressed = true;
                    i0 = mybuttons[fi][fj].i;
                    j0 = mybuttons[fi][fj].j;
                    gc.removeLeaveLine(i0, j0);
                }
            }
            @Override
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                if (evt.getButton() == MouseEvent.BUTTON1) {
                    ismousePressed = false;
                }       
            }
                });
                        
            }
        }
    }                                                                                  

    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new testing().setVisible(true);
            }
        });
    }

    private int i, j, i0, j0;
    private boolean ismousePressed;
    // Variables declaration - do not modify                     
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration                   
    private GameControllar gc;
    myButton [][] mybuttons;
    
    private class myButton extends JButton{
        public int i;
        public int j;

        public myButton(int i, int j) {
            this.i = i;
            this.j = j;
        }        
    }
    
    private class myButtonListener extends MouseAdapter{
        private final int i,j;
        boolean ispressed;
        
        public myButtonListener(int i, int j) {
            this.i = i;
            this.j = j;
        }
        
        public void setIsPressed(boolean bool){
            ispressed = bool;
        }
        
        @Override
        public void mouseExited(MouseEvent e) {
            super.mouseExited(e); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseEntered(MouseEvent e) {
            super.mouseEntered(e); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            super.mouseReleased(e); //To change body of generated methods, choose Tools | Templates.
        }

        @Override
        public void mousePressed(MouseEvent e) {
            super.mousePressed(e); //To change body of generated methods, choose Tools | Templates.
        }
        
    }
}

