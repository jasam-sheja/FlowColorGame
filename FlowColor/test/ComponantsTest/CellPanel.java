
package ComponantsTest;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

/**
 *
 * @author jasam sheja
 */
public class CellPanel extends javax.swing.JPanel {

    public CellPanel(int rowIndex, int colomunIndex,boolean drawDot, boolean drawBridge, boolean drawHall, Color color) {
        this(rowIndex, colomunIndex,
                false, false, false, false,
                drawDot, drawBridge, drawHall,
                color, color);
    }

    public CellPanel(int rowIndex, int colomunIndex, boolean drawUp, boolean drawDown, boolean drawRight, boolean drawLeft, boolean drawDot, boolean drawBridge, boolean drawHall, Color horizentalColor, Color verticalColor) {
        initComponents();
        this.rowIndex = rowIndex;
        this.colomunIndex = colomunIndex;
        this.drawUp = drawUp;
        this.drawDown = drawDown;
        this.drawRight = drawRight;
        this.drawLeft = drawLeft;
        this.drawDot = drawDot;
        this.drawBridge = drawBridge;
        this.drawHall = drawHall;
        boolean shouldHaveColor = drawUp || drawDown || drawRight || drawLeft || drawDot;
        if (shouldHaveColor) {
            if (!drawBridge && !drawHall) {
                this.setColor(horizentalColor);
            } else if (drawBridge) {
                this.setColor(horizentalColor, true);
                this.setColor(verticalColor, false);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // <editor-fold defaultstate="collapsed" desc="Indexes getting">
    public int getRowIndex() {
        return rowIndex;
    }

    public int getColomunIndex() {
        return colomunIndex;
    }
    // </editor-fold>  
    
    // <editor-fold defaultstate="collapsed" desc="Set pipes">  
    public void setDrawUp(boolean drawUp,Color color) {
        this.drawUp = drawUp;
        if(drawUp){
            if(drawBridge)
                setColor(color, false);
            else
                setColor(color);
        }
    }

    public void setDrawDown(boolean drawDown,Color color) {
        this.drawDown = drawDown;
        if(drawDown){
            if(drawBridge)
                setColor(color, false);
            else
                setColor(color);
        }
    }

    public void setDrawRight(boolean drawRight,Color color) {
        this.drawRight = drawRight;
        if(drawRight){
            if(drawBridge)
                setColor(color, true);
            else
                setColor(color);
        }
    }

    public void setDrawLeft(boolean drawLeft,Color color) {
        this.drawLeft = drawLeft;
        if(drawLeft){
            if(drawBridge)
                setColor(color, true);
            else
                setColor(color);
        }
    }
    // </editor-fold>  
    
    // <editor-fold defaultstate="collapsed" desc="Set Size">  
    @Override
    public void setSize(Dimension d) {
        setSize(d.width);
    }

    @Override
    public void setSize(int width, int height) {
        setSize(width);
    }

    public void setSize(int width) {
        super.setSize(width, width);
        super.setPreferredSize(new Dimension(width, width));
        super.setMaximumSize(new Dimension(width, width));
        super.setMinimumSize(new Dimension(width, width));
    }
    // </editor-fold>
    
    // <editor-fold defaultstate="collapsed" desc="Set Colors">  
    public final void setColor(Color color, boolean horizental) {
        if (horizental) {
            colorHorizental = color;
        } else {
            colorVertical = color;
        }        
    }

    public final void setColor(Color color) {
        if (drawBridge) {
            throw new IllegalArgumentException("unknow which color to assigne");
        }
        if (drawHall) {
            throw new IllegalArgumentException("this should have no color");
        }
        setColor(color, true);
        setColor(color, false);
    }
    // </editor-fold>  
    
    // <editor-fold defaultstate="collapsed" desc="Get Colors">  
    public final Color getColor(boolean horizental) {
        return horizental?colorHorizental:colorVertical;
    }
    // </editor-fold>  
    private void doDrawing(Graphics g) {

        Graphics2D g2d = (Graphics2D) g;
        int n = 0, np = 0;
        int x;
        int y;
        int width;
        int height;
        int factor = Math.max(getSize().width, getSize().height);
        
        g2d.setColor(Color.LIGHT_GRAY);   //bordor color     
        if (drawDot) {
            width = 2*factor / 3;
            height = 2*factor / 3;
            x = factor / 2 - width / 2;
            y = factor / 2 - height / 2;
            g2d.drawRoundRect(x, y, width, height, width, height);
            g2d.setColor(colorVertical);
            g2d.fillRoundRect(x, y, width, height, width, height);
            n++;
        }
        if (drawBridge) {

            n++;
        }
        if (drawHall) {

            n++;
        }
        if (drawUp) {
            width = factor / 3;
            height = factor / 2 + width/2;
            x = factor / 2 - width / 2;
            y = 0;
            g2d.drawRect(x, y, width, height);
            g2d.setColor(colorVertical);
            g2d.fillRect(x, y, width, height);
            np++;
        }
        if (drawDown) {
            width = factor / 3;
            height = factor / 2 + width/2;
            x = factor / 2 - width / 2;
            y = factor / 2 - width/2;
            g2d.drawRect(x, y, width, height);
            g2d.setColor(colorVertical);
            g2d.fillRect(x, y, width, height);
            np++;
        }
        if (drawRight) {
            height = factor / 3;
            width = factor / 2 + height/2;
            x = factor / 2 - height/2;
            y = factor / 2 - height / 2;
            g2d.drawRect(x, y, width, height);
            g2d.setColor(colorVertical);
            g2d.fillRect(x, y, width, height);
            np++;
        }
        if (drawLeft) {
            height = factor / 3;
            width = factor / 2 + height/2;
            x = 0;
            y = factor / 2 - height / 2;
            g2d.drawRect(x, y, width, height);
            g2d.setColor(colorVertical);
            g2d.fillRect(x, y, width, height);
            np++;
        }
        this.repaint();//show the result
        if (n > 1) {
            throw new IllegalArgumentException("in cell there should be either a dot or a hall or a bridge");
        }
        if (!drawBridge && np > 2) {
            throw new IllegalArgumentException("no more than 2 pipe in this cell");
        }
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        doDrawing(g);
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(testing.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                JFrame j = new JFrame("test");
                j.setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
                j.setSize(480, 320);
                Image im = new ImageIcon(this.getClass().getResource("/pipes/Blue.png")).getImage();
                CellPanel cellPanel = new CellPanel(0,0,false,false,false,null);
                cellPanel.setSize(50);
                cellPanel.setDrawUp(true, Color.BLUE);
                cellPanel.setDrawDown(true, Color.BLUE);
                j.add(cellPanel);
                j.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
//indexes
    private final int rowIndex;
    private final int colomunIndex;

    //pipes to draw
    private boolean drawUp;
    private boolean drawDown;
    private boolean drawRight;
    private boolean drawLeft;
    
    //componants to drow
    private final boolean drawDot;
    private final boolean drawBridge;
    private final boolean drawHall;

    //colors of the pipes
    Color colorHorizental;
    Color colorVertical;
}
